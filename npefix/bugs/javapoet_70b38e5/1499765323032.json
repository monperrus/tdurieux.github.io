{"endInit":1499765313391,"executions":[{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at com.squareup.javapoet.TypeName.get(TypeName.java:318)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:93)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n    at com.sun.tools.javac.main.Main.compile(Main.java:439)\n    at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:132)\n\n\n","type":"test","success":false},"startDate":1499765316013,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,58 +106,60 @@\n   public static TypeName get(TypeMirror mirror) {\n-    return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n-      @Override public TypeName visitPrimitive(PrimitiveType t, Void p) {\n-        switch (t.getKind()) {\n-          case BOOLEAN:\n+    if (mirror != null) {\n+      return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n+        @Override public TypeName visitPrimitive(PrimitiveType t, Void p) {\n+          switch (t.getKind()) {\n+            case BOOLEAN:\n             return TypeName.BOOLEAN;\n-          case BYTE:\n+            case BYTE:\n             return TypeName.BYTE;\n-          case SHORT:\n+            case SHORT:\n             return TypeName.SHORT;\n-          case INT:\n+            case INT:\n             return TypeName.INT;\n-          case LONG:\n+            case LONG:\n             return TypeName.LONG;\n-          case CHAR:\n+            case CHAR:\n             return TypeName.CHAR;\n-          case FLOAT:\n+            case FLOAT:\n             return TypeName.FLOAT;\n-          case DOUBLE:\n+            case DOUBLE:\n             return TypeName.DOUBLE;\n-          default:\n+            default:\n             throw new AssertionError();\n+          }\n         }\n-      }\n-\n-      @Override public TypeName visitDeclared(DeclaredType t, Void p) {\n-        ClassName rawType = ClassName.get((TypeElement) t.asElement());\n-        if (t.getTypeArguments().isEmpty()) return rawType;\n-\n-        List<TypeName> typeArgumentNames = new ArrayList<>();\n-        for (TypeMirror mirror : t.getTypeArguments()) {\n-          typeArgumentNames.add(get(mirror));\n+        \n+        @Override public TypeName visitDeclared(DeclaredType t, Void p) {\n+          ClassName rawType = ClassName.get((TypeElement) t.asElement());\n+          if (t.getTypeArguments().isEmpty()) return rawType;\n+          \n+          List<TypeName> typeArgumentNames = new ArrayList<>();\n+          for (TypeMirror mirror : t.getTypeArguments()) {\n+            typeArgumentNames.add(get(mirror));\n+          }\n+          return new ParameterizedTypeName(rawType, typeArgumentNames);\n         }\n-        return new ParameterizedTypeName(rawType, typeArgumentNames);\n-      }\n-\n-      @Override public ArrayTypeName visitArray(ArrayType t, Void p) {\n-        return ArrayTypeName.get(t);\n-      }\n-\n-      @Override public TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, Void p) {\n-        return TypeVariableName.get(t);\n-      }\n-\n-      @Override public TypeName visitWildcard(javax.lang.model.type.WildcardType t, Void p) {\n-        return WildcardTypeName.get(t);\n-      }\n-\n-      @Override public TypeName visitNoType(NoType t, Void p) {\n-        if (t.getKind() == TypeKind.VOID) return TypeName.VOID;\n-        return super.visitUnknown(t, p);\n-      }\n-\n-      @Override protected TypeName defaultAction(TypeMirror e, Void p) {\n-        throw new IllegalArgumentException(\"Unexpected type mirror: \" + e);\n-      }\n-    }, null);\n+        \n+        @Override public ArrayTypeName visitArray(ArrayType t, Void p) {\n+          return ArrayTypeName.get(t);\n+        }\n+        \n+        @Override public TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, Void p) {\n+          return TypeVariableName.get(t);\n+        }\n+        \n+        @Override public TypeName visitWildcard(javax.lang.model.type.WildcardType t, Void p) {\n+          return WildcardTypeName.get(t);\n+        }\n+        \n+        @Override public TypeName visitNoType(NoType t, Void p) {\n+          if (t.getKind() == TypeKind.VOID) return TypeName.VOID;\n+          return super.visitUnknown(t, p);\n+        }\n+        \n+        @Override protected TypeName defaultAction(TypeMirror e, Void p) {\n+          throw new IllegalArgumentException(\"Unexpected type mirror: \" + e);\n+        }\n+      }, null);\n+    }\n   }\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"Primitive","value":false,"class":"class java.lang.Boolean"},"epsilon":0,"strategy":"Strat3","used":true,"decisionType":"NEW"}],"endDate":1499765316198,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at com.squareup.javapoet.TypeName.get(TypeName.java:318)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:92)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n    at com.sun.tools.javac.main.Main.compile(Main.java:439)\n    at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:132)\n\n\n","type":"test","success":false},"startDate":1499765316198,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,58 +106,60 @@\n   public static TypeName get(TypeMirror mirror) {\n-    return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n-      @Override public TypeName visitPrimitive(PrimitiveType t, Void p) {\n-        switch (t.getKind()) {\n-          case BOOLEAN:\n+    if (mirror != null) {\n+      return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n+        @Override public TypeName visitPrimitive(PrimitiveType t, Void p) {\n+          switch (t.getKind()) {\n+            case BOOLEAN:\n             return TypeName.BOOLEAN;\n-          case BYTE:\n+            case BYTE:\n             return TypeName.BYTE;\n-          case SHORT:\n+            case SHORT:\n             return TypeName.SHORT;\n-          case INT:\n+            case INT:\n             return TypeName.INT;\n-          case LONG:\n+            case LONG:\n             return TypeName.LONG;\n-          case CHAR:\n+            case CHAR:\n             return TypeName.CHAR;\n-          case FLOAT:\n+            case FLOAT:\n             return TypeName.FLOAT;\n-          case DOUBLE:\n+            case DOUBLE:\n             return TypeName.DOUBLE;\n-          default:\n+            default:\n             throw new AssertionError();\n+          }\n         }\n-      }\n-\n-      @Override public TypeName visitDeclared(DeclaredType t, Void p) {\n-        ClassName rawType = ClassName.get((TypeElement) t.asElement());\n-        if (t.getTypeArguments().isEmpty()) return rawType;\n-\n-        List<TypeName> typeArgumentNames = new ArrayList<>();\n-        for (TypeMirror mirror : t.getTypeArguments()) {\n-          typeArgumentNames.add(get(mirror));\n+        \n+        @Override public TypeName visitDeclared(DeclaredType t, Void p) {\n+          ClassName rawType = ClassName.get((TypeElement) t.asElement());\n+          if (t.getTypeArguments().isEmpty()) return rawType;\n+          \n+          List<TypeName> typeArgumentNames = new ArrayList<>();\n+          for (TypeMirror mirror : t.getTypeArguments()) {\n+            typeArgumentNames.add(get(mirror));\n+          }\n+          return new ParameterizedTypeName(rawType, typeArgumentNames);\n         }\n-        return new ParameterizedTypeName(rawType, typeArgumentNames);\n-      }\n-\n-      @Override public ArrayTypeName visitArray(ArrayType t, Void p) {\n-        return ArrayTypeName.get(t);\n-      }\n-\n-      @Override public TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, Void p) {\n-        return TypeVariableName.get(t);\n-      }\n-\n-      @Override public TypeName visitWildcard(javax.lang.model.type.WildcardType t, Void p) {\n-        return WildcardTypeName.get(t);\n-      }\n-\n-      @Override public TypeName visitNoType(NoType t, Void p) {\n-        if (t.getKind() == TypeKind.VOID) return TypeName.VOID;\n-        return super.visitUnknown(t, p);\n-      }\n-\n-      @Override protected TypeName defaultAction(TypeMirror e, Void p) {\n-        throw new IllegalArgumentException(\"Unexpected type mirror: \" + e);\n-      }\n-    }, null);\n+        \n+        @Override public ArrayTypeName visitArray(ArrayType t, Void p) {\n+          return ArrayTypeName.get(t);\n+        }\n+        \n+        @Override public TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, Void p) {\n+          return TypeVariableName.get(t);\n+        }\n+        \n+        @Override public TypeName visitWildcard(javax.lang.model.type.WildcardType t, Void p) {\n+          return WildcardTypeName.get(t);\n+        }\n+        \n+        @Override public TypeName visitNoType(NoType t, Void p) {\n+          if (t.getKind() == TypeKind.VOID) return TypeName.VOID;\n+          return super.visitUnknown(t, p);\n+        }\n+        \n+        @Override protected TypeName defaultAction(TypeMirror e, Void p) {\n+          throw new IllegalArgumentException(\"Unexpected type mirror: \" + e);\n+        }\n+      }, null);\n+    }\n   }\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"Primitive","value":false,"class":"class java.lang.Boolean"},"epsilon":0,"strategy":"Strat3","used":true,"decisionType":"NEW"}],"endDate":1499765316342,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorSuperType(com.squareup.javapoet.TypesTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at com.squareup.javapoet.TypeName.get(TypeName.java:318)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:92)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(TypesTest.java:183)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n    at com.sun.tools.javac.main.Main.compile(Main.java:439)\n    at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:132)\n\n\n","type":"test","success":false},"startDate":1499765315489,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,58 +106,60 @@\n   public static TypeName get(TypeMirror mirror) {\n-    return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n-      @Override public TypeName visitPrimitive(PrimitiveType t, Void p) {\n-        switch (t.getKind()) {\n-          case BOOLEAN:\n+    if (mirror != null) {\n+      return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n+        @Override public TypeName visitPrimitive(PrimitiveType t, Void p) {\n+          switch (t.getKind()) {\n+            case BOOLEAN:\n             return TypeName.BOOLEAN;\n-          case BYTE:\n+            case BYTE:\n             return TypeName.BYTE;\n-          case SHORT:\n+            case SHORT:\n             return TypeName.SHORT;\n-          case INT:\n+            case INT:\n             return TypeName.INT;\n-          case LONG:\n+            case LONG:\n             return TypeName.LONG;\n-          case CHAR:\n+            case CHAR:\n             return TypeName.CHAR;\n-          case FLOAT:\n+            case FLOAT:\n             return TypeName.FLOAT;\n-          case DOUBLE:\n+            case DOUBLE:\n             return TypeName.DOUBLE;\n-          default:\n+            default:\n             throw new AssertionError();\n+          }\n         }\n-      }\n-\n-      @Override public TypeName visitDeclared(DeclaredType t, Void p) {\n-        ClassName rawType = ClassName.get((TypeElement) t.asElement());\n-        if (t.getTypeArguments().isEmpty()) return rawType;\n-\n-        List<TypeName> typeArgumentNames = new ArrayList<>();\n-        for (TypeMirror mirror : t.getTypeArguments()) {\n-          typeArgumentNames.add(get(mirror));\n+        \n+        @Override public TypeName visitDeclared(DeclaredType t, Void p) {\n+          ClassName rawType = ClassName.get((TypeElement) t.asElement());\n+          if (t.getTypeArguments().isEmpty()) return rawType;\n+          \n+          List<TypeName> typeArgumentNames = new ArrayList<>();\n+          for (TypeMirror mirror : t.getTypeArguments()) {\n+            typeArgumentNames.add(get(mirror));\n+          }\n+          return new ParameterizedTypeName(rawType, typeArgumentNames);\n         }\n-        return new ParameterizedTypeName(rawType, typeArgumentNames);\n-      }\n-\n-      @Override public ArrayTypeName visitArray(ArrayType t, Void p) {\n-        return ArrayTypeName.get(t);\n-      }\n-\n-      @Override public TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, Void p) {\n-        return TypeVariableName.get(t);\n-      }\n-\n-      @Override public TypeName visitWildcard(javax.lang.model.type.WildcardType t, Void p) {\n-        return WildcardTypeName.get(t);\n-      }\n-\n-      @Override public TypeName visitNoType(NoType t, Void p) {\n-        if (t.getKind() == TypeKind.VOID) return TypeName.VOID;\n-        return super.visitUnknown(t, p);\n-      }\n-\n-      @Override protected TypeName defaultAction(TypeMirror e, Void p) {\n-        throw new IllegalArgumentException(\"Unexpected type mirror: \" + e);\n-      }\n-    }, null);\n+        \n+        @Override public ArrayTypeName visitArray(ArrayType t, Void p) {\n+          return ArrayTypeName.get(t);\n+        }\n+        \n+        @Override public TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, Void p) {\n+          return TypeVariableName.get(t);\n+        }\n+        \n+        @Override public TypeName visitWildcard(javax.lang.model.type.WildcardType t, Void p) {\n+          return WildcardTypeName.get(t);\n+        }\n+        \n+        @Override public TypeName visitNoType(NoType t, Void p) {\n+          if (t.getKind() == TypeKind.VOID) return TypeName.VOID;\n+          return super.visitUnknown(t, p);\n+        }\n+        \n+        @Override protected TypeName defaultAction(TypeMirror e, Void p) {\n+          throw new IllegalArgumentException(\"Unexpected type mirror: \" + e);\n+        }\n+      }, null);\n+    }\n   }\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"Primitive","value":false,"class":"class java.lang.Boolean"},"epsilon":0,"strategy":"Strat3","used":true,"decisionType":"NEW"}],"endDate":1499765316013,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765316502,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return null;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"Primitive","value":"null","class":"null"},"epsilon":0,"strategy":"Strat4 NULL","used":true,"decisionType":"NEW"}],"endDate":1499765316654,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): null\nclass java.lang.NullPointerException: null\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:37)\n    at com.squareup.javapoet.WildcardTypeName.subtypeOf(WildcardTypeName.java:72)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n    at com.sun.tools.javac.main.Main.compile(Main.java:439)\n\n\n","type":"test","success":false},"startDate":1499765316654,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return null;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"Primitive","value":"null","class":"null"},"epsilon":0,"strategy":"Strat4 NULL","used":true,"decisionType":"NEW"}],"endDate":1499765316792,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765316342,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return null;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"Primitive","value":"null","class":"null"},"epsilon":0,"strategy":"Strat4 NULL","used":true,"decisionType":"NEW"}],"endDate":1499765316502,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): invalid lower bound: long\nclass java.lang.IllegalArgumentException: invalid lower bound: long\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765316949,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.LONG;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"LONG"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765317106,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): invalid lower bound: long\nclass java.lang.IllegalArgumentException: invalid lower bound: long\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765317106,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.LONG;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"LONG"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765317256,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765316793,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.LONG;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"LONG"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765316949,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): invalid lower bound: int\nclass java.lang.IllegalArgumentException: invalid lower bound: int\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765317450,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.INT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"INT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765317597,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): invalid lower bound: int\nclass java.lang.IllegalArgumentException: invalid lower bound: int\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765317597,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.INT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"INT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765317741,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765317257,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.INT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"INT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765317450,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): invalid lower bound: float\nclass java.lang.IllegalArgumentException: invalid lower bound: float\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765317934,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.FLOAT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"FLOAT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765318067,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): invalid lower bound: float\nclass java.lang.IllegalArgumentException: invalid lower bound: float\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765318067,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.FLOAT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"FLOAT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765318185,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765317742,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.FLOAT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"FLOAT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765317934,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): invalid lower bound: double\nclass java.lang.IllegalArgumentException: invalid lower bound: double\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765318326,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.DOUBLE;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"DOUBLE"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765318460,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): invalid lower bound: double\nclass java.lang.IllegalArgumentException: invalid lower bound: double\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765318460,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.DOUBLE;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"DOUBLE"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765318578,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765318185,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.DOUBLE;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"DOUBLE"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765318326,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): invalid lower bound: char\nclass java.lang.IllegalArgumentException: invalid lower bound: char\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765318705,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.CHAR;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"CHAR"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765318841,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): invalid lower bound: char\nclass java.lang.IllegalArgumentException: invalid lower bound: char\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765318841,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.CHAR;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"CHAR"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765318953,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765318578,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.CHAR;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"CHAR"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765318705,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): invalid lower bound: byte\nclass java.lang.IllegalArgumentException: invalid lower bound: byte\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765319078,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.BYTE;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"BYTE"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765319209,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): invalid lower bound: byte\nclass java.lang.IllegalArgumentException: invalid lower bound: byte\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765319209,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.BYTE;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"BYTE"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765319315,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765318953,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.BYTE;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"BYTE"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765319078,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): invalid lower bound: short\nclass java.lang.IllegalArgumentException: invalid lower bound: short\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765319426,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.SHORT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"SHORT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765319531,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): invalid lower bound: short\nclass java.lang.IllegalArgumentException: invalid lower bound: short\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765319531,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.SHORT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"SHORT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765319688,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765319315,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.SHORT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"SHORT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765319426,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): invalid lower bound: boolean\nclass java.lang.IllegalArgumentException: invalid lower bound: boolean\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765319802,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.BOOLEAN;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"BOOLEAN"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765319911,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): invalid lower bound: boolean\nclass java.lang.IllegalArgumentException: invalid lower bound: boolean\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765319911,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.BOOLEAN;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"BOOLEAN"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765320016,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765319688,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.BOOLEAN;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"BOOLEAN"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765319802,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): invalid lower bound: void\nclass java.lang.IllegalArgumentException: invalid lower bound: void\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:174)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765320128,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.VOID;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"VOID"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765320233,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): invalid lower bound: void\nclass java.lang.IllegalArgumentException: invalid lower bound: void\n    at com.squareup.javapoet.Util.checkArgument(Util.java:49)\n    at com.squareup.javapoet.WildcardTypeName.<init>(WildcardTypeName.java:41)\n    at com.squareup.javapoet.WildcardTypeName.supertypeOf(WildcardTypeName.java:84)\n    at com.squareup.javapoet.WildcardTypeName.get(WildcardTypeName.java:94)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:275)\n    at com.squareup.javapoet.TypeName$1.visitWildcard(TypeName.java:1)\n    at com.sun.tools.javac.code.Type$WildcardType.accept(Type.java:529)\n    at com.squareup.javapoet.TypeName.get(TypeName.java:156)\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:165)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n\n\n","type":"test","success":false},"startDate":1499765320233,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.VOID;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"VOID"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765320337,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765320016,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.VOID;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"VOID"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765320128,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest): expected:<? [extends java.lang.CharSequence]> but was:<? [super java.lang.Object]>\nclass org.junit.ComparisonFailure: expected:<? [extends java.lang.CharSequence]> but was:<? [super java.lang.Object]>\n    at com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(TypesTest.java:175)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n    at com.sun.tools.javac.main.Main.compile(Main.java:439)\n    at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:132)\n    at com.google.testing.compile.Compilation.compile(Compilation.java:77)\n    at com.google.testing.compile.CompilationRule$1.evaluate(CompilationRule.java:59)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\n\n","type":"test","success":false},"startDate":1499765320448,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorExtendsType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.OBJECT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"OBJECT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765320559,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"error":"wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest): expected:<?[]> but was:<?[ super java.lang.Object]>\nclass org.junit.ComparisonFailure: expected:<?[]> but was:<?[ super java.lang.Object]>\n    at com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(TypesTest.java:166)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at com.google.testing.compile.CompilationRule$1$1.process(CompilationRule.java:83)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:793)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$200(JavacProcessingEnvironment.java:97)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.runContributingProcs(JavacProcessingEnvironment.java:644)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1027)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1185)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1108)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:824)\n    at com.sun.tools.javac.main.Main.compile(Main.java:439)\n    at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:132)\n    at com.google.testing.compile.Compilation.compile(Compilation.java:77)\n    at com.google.testing.compile.CompilationRule$1.evaluate(CompilationRule.java:59)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\n\n","type":"test","success":false},"startDate":1499765320559,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorNoBounds","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.OBJECT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":2,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"OBJECT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765320838,"metadata":{"seed":10,"strategy_selection":"exploration"}},{"result":{"type":"test","success":true},"startDate":1499765320337,"locations":[{"sourceEnd":4180,"executionCount":0,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175}],"test":{"name":"wildcardMirrorSuperType","class":"com.squareup.javapoet.TypesTest"},"diff":"--- /TypeName.java\n+++ /TypeName.java\n@@ -106,2 +106,5 @@\n   public static TypeName get(TypeMirror mirror) {\n+    if (mirror == null) {\n+      return TypeName.OBJECT;\n+    }\n     return mirror.accept(new SimpleTypeVisitor7<TypeName, Void>() {\n","decisions":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"OBJECT"},"epsilon":0,"strategy":"Strat4 VAR","used":true,"decisionType":"NEW"}],"endDate":1499765320448,"metadata":{"seed":10,"strategy_selection":"exploration"}}],"start":1499765315479,"searchSpace":[{"nbUse":1,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"Primitive","value":false,"class":"class java.lang.Boolean"},"epsilon":0,"strategy":"Strat3","used":true,"decisionType":"NEW"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"Primitive","value":"null","class":"null"},"epsilon":0,"strategy":"Strat4 NULL","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"LONG"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"INT"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"FLOAT"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"DOUBLE"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"CHAR"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"BYTE"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"SHORT"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"BOOLEAN"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"VOID"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"},{"nbUse":0,"location":{"sourceEnd":4180,"line":107,"class":"com.squareup.javapoet.TypeName","sourceStart":4175},"value":{"instanceType":"StaticVariable","class":"com.squareup.javapoet.TypeName","fieldName":"OBJECT"},"epsilon":0,"strategy":"Strat4 VAR","used":false,"decisionType":"RANDOM"}],"end":1499765322762}