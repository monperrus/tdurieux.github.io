(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{231:function(e,t,a){"use strict";a.r(t);var n=a(2),o=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"nopol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nopol","aria-hidden":"true"}},[e._v("#")]),e._v(" Nopol")]),e._v(" "),a("p",[e._v("Nopol is an automatic software repair tool for Java. This code is research code, released under the GPL licence.")]),e._v(" "),a("p",[e._v("If you use this code for academic research, please cite:\n"),a("a",{attrs:{href:"https://hal.archives-ouvertes.fr/hal-01285008/document",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nopol: Automatic Repair of Conditional Statement Bugs in Java Programs"),a("OutboundLink")],1),e._v(" (Jifeng Xuan, Matias Martinez, Favio Demarco, Maxime Clément, Sebastian Lamelas, Thomas Durieux, Daniel Le Berre, Daniel Le Berre, Martin Monperrus). IEEE Transactions on Software Engineering, 2016.")]),e._v(" "),a("div",{staticClass:"language-Bibtex extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@article{xuan:hal-01285008,\n title = {Nopol: Automatic Repair of Conditional Statement Bugs in Java Programs},\n author = {Xuan, Jifeng and Martinez, Matias and Demarco, Favio and Clément, Maxime and Lamelas, Sebastian and Durieux, Thomas and Le Berre, Daniel and Monperrus, Martin},\n journal = {IEEE Transactions on Software Engineering},\n year = {2016},\n}\n")])])]),a("p",[e._v("Others papers about Nopol:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://hal.inria.fr/hal-00977798/PDF/NOPOL-Automatic-Repair-of-Buggy-If-Conditions-and-Missing-Preconditions-with-SMT.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v('"Automatic Repair of Buggy If Conditions and Missing Preconditions with SMT"'),a("OutboundLink")],1),e._v(" (Favio DeMarco, Jifeng Xuan, Daniel Le Berre, Martin Monperrus), In Proceedings of the 6th International Workshop on Constraints in Software Testing, Verification, and Analysis (CSTVA 2014) "),a("a",{attrs:{href:"http://www.monperrus.net/martin/bibtexbrowser.php?key=DeMarco2014&bib=monperrus.bib",target:"_blank",rel:"noopener noreferrer"}},[e._v("(Bibtex)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://hal.archives-ouvertes.fr/hal-01279233/document",target:"_blank",rel:"noopener noreferrer"}},[e._v("DynaMoth: Dynamic Code Synthesis for Automatic Program Repair"),a("OutboundLink")],1),e._v(" (Thomas Durieux, Martin Monperrus), In Proceedings of the 11th International Workshop in Automation of Software Test, 2016, describes the dynamic synthesis part of Nopol "),a("a",{attrs:{href:"http://www.monperrus.net/martin/bibtexbrowser.php?key=durieux%3Ahal-01279233&bib=monperrus.bib",target:"_blank",rel:"noopener noreferrer"}},[e._v("(Bibtex)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://arxiv.org/pdf/1504.05078.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Automatic Repair of Infinite Loops"),a("OutboundLink")],1),e._v(" (Sebastian Lamelas-Marcote and Martin Monperrus), Technical report hal-01144026, University of Lille, 2015, describes the Infinitel part. "),a("a",{attrs:{href:"http://www.monperrus.net/martin/bibtexbrowser.php?key=Lamelas2015&bib=monperrus.bib",target:"_blank",rel:"noopener noreferrer"}},[e._v("(Bibtex)"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"getting-started"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-started","aria-hidden":"true"}},[e._v("#")]),e._v(" Getting started")]),e._v(" "),a("p",[e._v("Nopol requires Java and an SMT solver installed on the machine (e.g. Z3)")]),e._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://github.com/SpoonLabs/CoCoSpoon",target:"_blank",rel:"noopener noreferrer"}},[e._v("CoCoSpoon"),a("OutboundLink")],1),e._v(":")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clone https://github.com/SpoonLabs/CoCoSpoon.git\ncd CoCoSpoon\nmvn clean install\ncd ..\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Compile NoPol:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clone https://github.com/SpoonLabs/nopol.git\ncd nopol/nopol\nexport JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64\n\n# -DskipTests is required, to run the tests one needs to compile ../test-projects/ (see below)\nmvn package -DskipTests\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Locate the Nopol jar file produced at step 2)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ ls target/*jar\ntarget/nopol-0.2-SNAPSHOT.jar\ntarget/nopol-0.2-SNAPSHOT-jar-with-dependencies.jar # we use this one\n")])])]),a("p",[e._v("In the following, "),a("code",[e._v("nopol.jar")]),e._v(" refers to the jar file with dependencies ("),a("code",[e._v("target/nopol-<VERSION>-SNAPSHOT-jar-with-dependencies.jar")]),e._v(")")]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[e._v("Compile the test-projects")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd ../test-projects/\n# compiling app (in target/classes) and tests (in target/test-classes), but don't run the tests (they obviously fail, because the goal is to repair them)\n$ mvn test -DskipTests \n")])])]),a("p",[e._v("4b) Optional: run the tests of Nopol to check your installation")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd ../nopol/\n$ mvn test\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[e._v("Execute Nopol (parameters explained below)")])]),e._v(" "),a("p",[e._v("(Long commands are broken in several lines, separated by a backslash, which means an escaped linebreak in Unix shells.)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cd ../test-projects/\njava -jar nopol.jar \\\n-s src/main/java/ \\\n-c target/classes:target/test-classes:/home/<user>/.m2/repository/junit/junit/4.11/junit-4.11.jar:/home/<user>/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar \\\n-t symbolic_examples.symbolic_example_1.NopolExampleTest \\\n-p ../nopol/lib/z3/z3_for_linux\n")])])]),a("p",[e._v("If you keep "),a("code",[e._v("nopol.jar")]),e._v(" instead of the actual jar located at the previous step, you'll get "),a("code",[e._v("Error: unable to access jarfile nopol.jar")]),e._v(" (see above). You should replace also "),a("code",[e._v("<user>")]),e._v(" by your own username.")]),e._v(" "),a("p",[e._v("It should output something like:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("----INFORMATION----\nNb classes : 34\nNb methods : 53\nNb statements: 5\nNb statement executed by the passing tests of the patched line: 0\nNb statement executed by the failing tests of the patched line: 0\nNb unit tests : 9\nNb Statements Analyzed : 3\nNb Statements with Angelic Value Found : 1\nNb inputs in SMT : 8\nNb SMT level: 2\nNb SMT components: [4] [== of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2]\n                  class java.lang.Boolean: 4\nNb variables in SMT : 13\nNb run failing test  : [2, 1]\nNb run passing test : [4, 18]\nNoPol Execution time : 3262ms\n----PATCH FOUND----\nsymbolic_examples.symbolic_example_1.NopolExample:12: CONDITIONAL index < 1\n")])])]),a("p",[e._v("NoPol (SMT and Dynamoth) returns also a unix code (integer):")]),e._v(" "),a("ul",[a("li",[e._v("0 if a patch has been found")]),e._v(" "),a("li",[e._v("-1 otherwise")])]),e._v(" "),a("p",[e._v("Parameter "),a("code",[e._v("-c")]),e._v(" can be found with "),a("code",[e._v("mvn dependency:build-classpath")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"minimal-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minimal-usage","aria-hidden":"true"}},[e._v("#")]),e._v(" Minimal Usage")]),e._v(" "),a("p",[e._v("4 parameters are required")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Usage: java -jar nopol.jar\n\n  (-s|--source) source1:source2:...:sourceN \n        Define the path to the source code of the project. For instance `src/main/java`\n\n  (-c|--classpath) <classpath>\n        Define the classpath of the project separated by a path separator (`:` on Linux). \n        Must contain the application binary classes (`target/classes`)\n        Must contain the application test classes (`target/test-classes`)\n        Must contain the library classes (`lib/junit.jar` for instance)\n        \n  [(-t|--test) test1:test2:...:testN ]\n        Define the tests of the project. For instance `symbolic_examples.symbolic_example_1.NopolExampleTest`\n\n  [(-p|--solver-path) <solverPath>]\n        Define the solver binary path (only used with smt synthesis). For instance `../nopol/lib/z3/z3_for_linux`\n\n")])])]),a("h2",{attrs:{id:"advanced-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced-usage","aria-hidden":"true"}},[e._v("#")]),e._v(" Advanced Usage")]),e._v(" "),a("p",[e._v("See also notes below.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Usage: java -jar nopol.jar\n\n  [(-m|--mode) <repair|ranking>]\n        Define the mode of execution. (default: repair)\n\n  [(-e|--type) <pre_then_cond|condition|precondition>]\n        The type of statement to analyze (only used with repair mode). (default: pre_then_cond)\n\n  [(-o|--oracle) <angelic|symbolic>]\n        Define the oracle (only used with repair mode). (default: angelic)\n\n  [(-y|--synthesis) <smt|dynamoth>]\n        Define the patch synthesis. (default: smt)\n\n  [(-l|--solver) <z3|cvc4>]\n        Define the solver (only used with smt synthesis). (default: z3)\n\n  [--complianceLevel <complianceLevel>]\n        The Java version of the project. (default: 7)\n\n  [--maxTime <maxTime>]\n        The maximum time execution in minute for the whole execution of Nopol.(default: 10)\n\n  [--maxTimeType <maxTimeType>]\n        The maximum time execution in minute for one type of patch per per suspicious statement (eg. 5 minutes max to find a precondition at line x). (default: 5)\n\n  [(-z|--flocal) < cocospoon|dumb|gzoltar>]\n        Define the fault localizer to be used. (default: cocospoon). \n          "cocospoon" means source code instrumentation plus ochiai metric.\n          "dumb" means random fault localization. \n          "gzoltar" means binary code instrumentation with external library plus ochiai metric.\n\n')])])]),a("p",[e._v("Notes: For using Dynamoth ("),a("code",[e._v("-y dynamoth")]),e._v("), you must add tools.jar in the classpath of Nopol, and use java with "),a("code",[e._v("-cp")]),e._v(" (and not "),a("code",[e._v("-jar")]),e._v("):")]),e._v(" "),a("pre",[a("code",[e._v("java -cp $JAVA_HOME/lib/tools.jar:../nopol/target/nopol-SNAPSHOT-jar-with-dependencies.jar fr.inria.lille.repair.Main <nopol arguments>\n")])])])},[],!1,null,null,null);t.default=o.exports}}]);